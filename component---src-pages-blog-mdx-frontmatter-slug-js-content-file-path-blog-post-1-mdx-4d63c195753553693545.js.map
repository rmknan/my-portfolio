{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-blog-post-1-mdx-4d63c195753553693545.js","mappings":"0NAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,OACHC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,0DAA2DI,EAAAA,cAAoBP,EAAYI,IAAK,KAAMG,EAAAA,cAAoBP,EAAYI,IAAK,KAAM,8oBAA+oBG,EAAAA,cAAoBP,EAAYI,IAAK,KAAMG,EAAAA,cAAoBP,EAAYI,IAAK,KAAM,kaAAmaG,EAAAA,cAAoBP,EAAYI,IAAK,KAAMG,EAAAA,cAAoBP,EAAYI,IAAK,KAAM,sbACj6C,CAKA,MAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UCTA,MAAMW,EAAWC,IAAsB,IAArB,KAACC,EAAI,SAAEC,GAASF,EAChC,OAAOJ,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoB,KAAM,CAChEO,UAAW,2BACVF,EAAKG,IAAIC,YAAYC,OAAQV,EAAAA,cAAoB,IAAK,CACvDO,UAAW,QACVF,EAAKG,IAAIC,YAAYE,MAAOL,EAAS,EAc7BM,EAAOC,IAAA,IAAC,KAACR,GAAKQ,EAAA,OAAKb,EAAAA,cAAoBc,EAAAA,EAAK,CACvDJ,MAAOL,EAAKG,IAAIC,YAAYC,MAC5BK,YAAaV,EAAKG,IAAIC,YAAYM,YAClCC,SAAU,SAASX,EAAKG,IAAIC,YAAYQ,QACxC,EAEa,SAASC,EAAiB1B,GACvC,OAAOQ,EAAAA,cAAoBG,EAAUX,EAAOQ,EAAAA,cAAoBmB,EAAqB3B,GACvF,C,+ECTA,MAnBYY,IAAiD,IAAhD,MAAEM,EAAK,YAAEK,EAAW,SAAEC,EAAQ,SAAEV,GAAUF,EAErD,MAAQM,MAAOU,EAAWL,YAAaM,EAAe,QAAEC,ICF3CC,EAAAA,EAAAA,IAAe,cAYhBC,KAAKC,aDRXC,EAAM,CACVhB,MAAOA,EACPK,YAAaA,GAAeM,EAC5BM,IAAK,GAAGL,IAAUN,GAAY,MAGhC,OACEhB,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQ0B,EAAIhB,MAAM,MAAIU,GACtBpB,EAAAA,cAAA,QAAM4B,KAAK,cAAcC,QAASH,EAAIX,cACrCT,EACA,C,sEEeA,MAAMwB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBhC,GAC/B,MAAMiC,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAf/B,EACFA,EAAWiC,GAGb,IAAIA,KAAsBjC,IAChC,CAACiC,EAAmBjC,GACzB,C","sources":["webpack://elegant-portfolio/./blog/post-1.mdx","webpack://elegant-portfolio/./src/pages/blog/{mdx.frontmatter__slug}.js","webpack://elegant-portfolio/./src/components/seo.js","webpack://elegant-portfolio/./src/hooks/use-site-metadata.jsx","webpack://elegant-portfolio/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    br: \"br\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.p, null, \"Blog post n°1. Write your post using Markdown syntax.\\n\", React.createElement(_components.br), \"\\n\", React.createElement(_components.br), \"\\n\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis interdum, mi vel volutpat pellentesque, mi tortor pharetra enim, sit amet efficitur dui justo eu nulla. Interdum et malesuada fames ac ante ipsum primis in faucibus. Phasellus facilisis purus justo, ac pellentesque quam interdum eget. Quisque vitae vehicula orci. Vivamus at eros vestibulum sem fringilla congue. Cras nec quam euismod, convallis sapien sit amet, commodo ligula. Etiam convallis dui quis finibus ultrices. Sed convallis lorem ac lorem consequat, sed fermentum velit dapibus. Pellentesque in orci eu risus sodales faucibus. Praesent et mollis mauris, vel elementum ligula.\\n\", React.createElement(_components.br), \"\\n\", React.createElement(_components.br), \"\\n\", \"Maecenas volutpat tristique purus, nec hendrerit nibh. Vestibulum suscipit ipsum felis, at hendrerit mi venenatis a. In hac habitasse platea dictumst. Nulla velit dui, placerat a consectetur non, ultricies non quam. Aliquam erat volutpat. Donec massa velit, interdum ut posuere et, commodo vel diam. Ut laoreet dolor eget quam tristique fermentum. Praesent vehicula ornare nulla, non efficitur mi efficitur vitae.\\n\", React.createElement(_components.br), \"\\n\", React.createElement(_components.br), \"\\n\", \"Cras mattis justo non orci gravida, ut lacinia dolor vestibulum. Donec non dui vitae nunc imperdiet pretium. Donec vel eros nec ligula tristique vestibulum eget a erat. Cras ullamcorper lacinia leo, non gravida nibh ultrices id. Praesent elementum felis at magna mattis, non sagittis augue elementum. Duis at nibh nisl. Duis aliquam in dolor et facilisis. Nunc molestie purus et sagittis bibendum. In at metus non elit rhoncus rhoncus.\");\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/rmknan/Github/my-portfolio/blog/post-1.mdx\";\nimport * as React from 'react';\nimport {graphql} from 'gatsby';\nimport Seo from '../../components/seo';\nconst BlogPost = ({data, children}) => {\n  return React.createElement(\"div\", null, React.createElement(\"h1\", {\n    className: \"text-3xl font-bold mb-2\"\n  }, data.mdx.frontmatter.title), React.createElement(\"p\", {\n    className: \"mb-4\"\n  }, data.mdx.frontmatter.date), children);\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: {eq: $id}) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM D, YYYY\")\n        description\n        slug\n      }\n    }\n  }\n`;\nexport const Head = ({data}) => React.createElement(Seo, {\n  title: data.mdx.frontmatter.title,\n  description: data.mdx.frontmatter.description,\n  pathname: `/blog/${data.mdx.frontmatter.slug}`\n});\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import * as React from 'react'\nimport { useSiteMetadata } from \"../hooks/use-site-metadata\";\n\nconst Seo = ({ title, description, pathname, children }) => {\n\n  const { title: siteTitle, description: siteDescription, siteUrl } = useSiteMetadata()\n\n  const seo = {\n    title: title,\n    description: description || siteDescription,\n    url: `${siteUrl}${pathname || ``}`,\n  }\n\n  return (\n    <>\n      <title>{seo.title} | {siteTitle}</title>\n      <meta name=\"description\" content={seo.description} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo","import { graphql, useStaticQuery } from \"gatsby\"\n\nexport const useSiteMetadata = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          siteUrl\n        }\n      }\n    }\n  `)\n\n  return data.site.siteMetadata\n}","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","br","_provideComponents","components","React","wrapper","MDXLayout","BlogPost","_ref","data","children","className","mdx","frontmatter","title","date","Head","_ref2","Seo","description","pathname","slug","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","siteTitle","siteDescription","siteUrl","useStaticQuery","site","siteMetadata","seo","url","name","content","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}